# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import konser_pb2 as konser__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in konser_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KonserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/konser.KonserService/RegisterUser',
                request_serializer=konser__pb2.User.SerializeToString,
                response_deserializer=konser__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.LoginUser = channel.unary_unary(
                '/konser.KonserService/LoginUser',
                request_serializer=konser__pb2.User.SerializeToString,
                response_deserializer=konser__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.TambahKonser = channel.unary_unary(
                '/konser.KonserService/TambahKonser',
                request_serializer=konser__pb2.Konser.SerializeToString,
                response_deserializer=konser__pb2.Status.FromString,
                _registered_method=True)
        self.EditKonser = channel.unary_unary(
                '/konser.KonserService/EditKonser',
                request_serializer=konser__pb2.Konser.SerializeToString,
                response_deserializer=konser__pb2.Status.FromString,
                _registered_method=True)
        self.HapusKonser = channel.unary_unary(
                '/konser.KonserService/HapusKonser',
                request_serializer=konser__pb2.KonserId.SerializeToString,
                response_deserializer=konser__pb2.Status.FromString,
                _registered_method=True)
        self.PesanTiket = channel.unary_unary(
                '/konser.KonserService/PesanTiket',
                request_serializer=konser__pb2.TiketRequest.SerializeToString,
                response_deserializer=konser__pb2.TiketResponse.FromString,
                _registered_method=True)
        self.LihatSemuaKonser = channel.unary_stream(
                '/konser.KonserService/LihatSemuaKonser',
                request_serializer=konser__pb2.Empty.SerializeToString,
                response_deserializer=konser__pb2.Konser.FromString,
                _registered_method=True)
        self.PesanBanyak = channel.stream_unary(
                '/konser.KonserService/PesanBanyak',
                request_serializer=konser__pb2.TiketRequest.SerializeToString,
                response_deserializer=konser__pb2.GeneralResponse.FromString,
                _registered_method=True)
        self.LiveChat = channel.stream_stream(
                '/konser.KonserService/LiveChat',
                request_serializer=konser__pb2.ChatMessage.SerializeToString,
                response_deserializer=konser__pb2.ChatMessage.FromString,
                _registered_method=True)


class KonserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TambahKonser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditKonser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HapusKonser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PesanTiket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LihatSemuaKonser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PesanBanyak(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiveChat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KonserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=konser__pb2.User.FromString,
                    response_serializer=konser__pb2.RegisterResponse.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=konser__pb2.User.FromString,
                    response_serializer=konser__pb2.LoginResponse.SerializeToString,
            ),
            'TambahKonser': grpc.unary_unary_rpc_method_handler(
                    servicer.TambahKonser,
                    request_deserializer=konser__pb2.Konser.FromString,
                    response_serializer=konser__pb2.Status.SerializeToString,
            ),
            'EditKonser': grpc.unary_unary_rpc_method_handler(
                    servicer.EditKonser,
                    request_deserializer=konser__pb2.Konser.FromString,
                    response_serializer=konser__pb2.Status.SerializeToString,
            ),
            'HapusKonser': grpc.unary_unary_rpc_method_handler(
                    servicer.HapusKonser,
                    request_deserializer=konser__pb2.KonserId.FromString,
                    response_serializer=konser__pb2.Status.SerializeToString,
            ),
            'PesanTiket': grpc.unary_unary_rpc_method_handler(
                    servicer.PesanTiket,
                    request_deserializer=konser__pb2.TiketRequest.FromString,
                    response_serializer=konser__pb2.TiketResponse.SerializeToString,
            ),
            'LihatSemuaKonser': grpc.unary_stream_rpc_method_handler(
                    servicer.LihatSemuaKonser,
                    request_deserializer=konser__pb2.Empty.FromString,
                    response_serializer=konser__pb2.Konser.SerializeToString,
            ),
            'PesanBanyak': grpc.stream_unary_rpc_method_handler(
                    servicer.PesanBanyak,
                    request_deserializer=konser__pb2.TiketRequest.FromString,
                    response_serializer=konser__pb2.GeneralResponse.SerializeToString,
            ),
            'LiveChat': grpc.stream_stream_rpc_method_handler(
                    servicer.LiveChat,
                    request_deserializer=konser__pb2.ChatMessage.FromString,
                    response_serializer=konser__pb2.ChatMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'konser.KonserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('konser.KonserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KonserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/konser.KonserService/RegisterUser',
            konser__pb2.User.SerializeToString,
            konser__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/konser.KonserService/LoginUser',
            konser__pb2.User.SerializeToString,
            konser__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TambahKonser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/konser.KonserService/TambahKonser',
            konser__pb2.Konser.SerializeToString,
            konser__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditKonser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/konser.KonserService/EditKonser',
            konser__pb2.Konser.SerializeToString,
            konser__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HapusKonser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/konser.KonserService/HapusKonser',
            konser__pb2.KonserId.SerializeToString,
            konser__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PesanTiket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/konser.KonserService/PesanTiket',
            konser__pb2.TiketRequest.SerializeToString,
            konser__pb2.TiketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LihatSemuaKonser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/konser.KonserService/LihatSemuaKonser',
            konser__pb2.Empty.SerializeToString,
            konser__pb2.Konser.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PesanBanyak(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/konser.KonserService/PesanBanyak',
            konser__pb2.TiketRequest.SerializeToString,
            konser__pb2.GeneralResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LiveChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/konser.KonserService/LiveChat',
            konser__pb2.ChatMessage.SerializeToString,
            konser__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
